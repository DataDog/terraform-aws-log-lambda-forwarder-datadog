# Required variables
variable "dd_api_key" {
  type        = string
  default     = null
  description = "The Datadog API key, which can be found from the APIs page (/account/settings#api). It will be stored in AWS Secrets Manager securely. If dd_api_key_secret_arn is also set, this value is ignored."
  sensitive   = true
}

variable "dd_api_key_secret_arn" {
  type        = string
  default     = null
  description = "The ARN of the secret storing the Datadog API key, if you already have it stored in Secrets Manager. You must store the secret as a plaintext, rather than a key-value pair."

  validation {
    condition     = var.dd_api_key_secret_arn == null || can(regex("^arn:.*:secretsmanager:.*", var.dd_api_key_secret_arn))
    error_message = "dd_api_key_secret_arn must be a valid Secrets Manager ARN."
  }
}

variable "dd_api_key_ssm_parameter_name" {
  type        = string
  default     = null
  description = "The name of the SSM parameter containing Datadog's API key. If set, both dd_api_key and dd_api_key_secret_arn will be ignored, the forwarder will use the SSM parameter name to fetch the API key."

  validation {
    condition     = var.dd_api_key_ssm_parameter_name == null || can(regex("^/[a-zA-Z0-9/_.-]*$", var.dd_api_key_ssm_parameter_name))
    error_message = "dd_api_key_ssm_parameter_name must match the pattern ^/[a-zA-Z0-9/_.-]*$."
  }
}

variable "dd_site" {
  type        = string
  default     = "datadoghq.com"
  description = "Define your Datadog Site to send data to."

  validation {
    condition     = contains(["datadoghq.com", "datadoghq.eu", "us3.datadoghq.com", "us5.datadoghq.com", "ap1.datadoghq.com", "ap2.datadoghq.com", "ddog-gov.com"], var.dd_site)
    error_message = "dd_site must be one of: datadoghq.com, datadoghq.eu, us3.datadoghq.com, us5.datadoghq.com, ap1.datadoghq.com, ap2.datadoghq.com, ddog-gov.com."
  }
}

# Lambda function configuration
variable "function_name" {
  type        = string
  default     = "DatadogForwarder"
  description = "The Datadog Forwarder Lambda function name. DO NOT change when updating an existing CloudFormation stack, otherwise the current forwarder function will be replaced and all the triggers will be lost."
}

variable "memory_size" {
  type        = number
  default     = 1024
  description = "Memory size for the Datadog Forwarder Lambda function"

  validation {
    condition     = var.memory_size >= 128 && var.memory_size <= 3008
    error_message = "memory_size must be between 128 and 3008."
  }
}

variable "timeout" {
  type        = number
  default     = 120
  description = "Timeout for the Datadog Forwarder Lambda function"
}

variable "existing_iam_role_arn" {
  type        = string
  default     = null
  description = "ARN of existing IAM role to use for the Lambda function. If not provided, a new IAM role will be created."
}

variable "tags_cache_ttl_seconds" {
  type        = number
  default     = 300
  description = "TTL (in seconds) for the Datadog tags cache"
}

variable "reserved_concurrency" {
  type        = string
  default     = null
  description = "Reserved concurrency for the Datadog Forwarder Lambda function. If not set, use unreserved account concurrency. We recommend using at least 10 reserved concurrency, but default to 0 as you may need to increase your limits for this. If using unreserved account concurrency you may limit other lambda functions in your environment."

  validation {
    condition     = var.reserved_concurrency == null || can(tonumber(var.reserved_concurrency))
    error_message = "reserved_concurrency must be a valid integer number."
  }
}

variable "log_retention_in_days" {
  type        = number
  default     = 90
  description = "CloudWatch log retention for logs generated by the Datadog Forwarder Lambda function"
}

variable "source_code_version" {
  type        = string
  default     = "4.12.0"
  description = "Version of the Datadog Forwarder source code to deploy"
}

variable "layer_version" {
  type        = string
  default     = "87"
  description = "Version of the Datadog Forwarder Lambda layer"
}


variable "install_as_layer" {
  type        = bool
  default     = true
  description = "Whether to use the layer-based installation flow. Set to false to use our legacy installation flow, which downloads the forwarder code from Github to an S3 bucket. Defaults to true."
}

variable "layer_arn" {
  type        = string
  default     = null
  description = "ARN for the layer containing the forwarder code. If empty, the script will use the version of the layer the forwarder was published with."
}

# Datadog configuration
variable "dd_tags" {
  type        = string
  default     = null
  description = "Add custom tags to forwarded logs. Comma-delimited string without trailing comma, e.g., env:prod,stack:classic"
}

variable "dd_fetch_lambda_tags" {
  type        = string
  default     = null
  description = "Let the forwarder fetch Lambda tags using GetResources API calls and apply them to logs, metrics and traces. If set to 'true', permission tag:GetResources will be automatically added to the Lambda execution IAM role."
}

variable "dd_fetch_log_group_tags" {
  type        = string
  default     = null
  description = "Let the forwarder fetch Log Group tags using ListTagsForResource and apply them to logs, metrics and traces. If set to 'true', permission logs:ListTagsForResource will be automatically added to the Lambda execution IAM role."
}

variable "dd_fetch_step_functions_tags" {
  type        = string
  default     = null
  description = "Let the forwarder fetch Step Functions tags using GetResources API calls and apply them to logs, metrics and traces. If set to 'true', permission tag:GetResources will be automatically added to the Lambda execution IAM role."
}

variable "dd_fetch_s3_tags" {
  type        = bool
  default     = false
  description = "Let the forwarder fetch S3 buckets tags using GetResources API calls and apply them to S3 based logs. If set to true, permission tag:GetResources will be automatically added to the Lambda execution IAM role."
}

# Network configuration
variable "dd_no_ssl" {
  type        = string
  default     = null
  description = "Disable SSL when forwarding logs, set to 'true' when forwarding logs through a proxy."
}

variable "dd_url" {
  type        = string
  default     = null
  description = "The endpoint URL to forward the logs to, useful for forwarding logs through a proxy"
}

variable "dd_port" {
  type        = string
  default     = null
  description = "The endpoint port to forward the logs to, useful for forwarding logs through a proxy"
}

variable "dd_skip_ssl_validation" {
  type        = string
  default     = null
  description = "Send logs over HTTPS, while NOT validating the certificate provided by the endpoint. This will still encrypt the traffic between the forwarder and the log intake endpoint, but will not verify if the destination SSL certificate is valid. Set to 'true' to skip SSL validation."
}

# Log processing
variable "redact_ip" {
  type        = string
  default     = null
  description = "Replace text matching \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3} with xxx.xxx.xxx.xxx. Set to 'true' to enable."
}

variable "redact_email" {
  type        = string
  default     = null
  description = "Replace text matching [a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+ with xxxxx@xxxxx.com. Set to 'true' to enable."
}

variable "dd_scrubbing_rule" {
  type        = string
  default     = null
  description = "Replace text matching the supplied regular expression with xxxxx (default) or dd_scrubbing_rule_replacement (if supplied). Log scrubbing rule is applied to the full JSON-formatted log, including any metadata that is automatically added by the Lambda function."
}

variable "dd_scrubbing_rule_replacement" {
  type        = string
  default     = null
  description = "Replace text matching dd_scrubbing_rule with the supplied text"
}

variable "exclude_at_match" {
  type        = string
  default     = null
  description = "DO NOT send logs matching the supplied regular expression. If a log matches both the exclude_at_match and include_at_match, it is excluded. Filtering rules are applied to the full JSON-formatted log, including any metadata that is automatically added by the function."
}

variable "include_at_match" {
  type        = string
  default     = null
  description = "Only send logs matching the supplied regular expression and not excluded by exclude_at_match."
}

variable "dd_multiline_log_regex_pattern" {
  type        = string
  default     = null
  description = "Use the supplied regular expression to detect for a new log line for multiline logs from S3, e.g., use expression \"\\d{2}\\/\\d{2}\\/\\d{4}\" for multiline logs beginning with pattern \"11/10/2014\"."
}

variable "dd_forward_log" {
  type        = string
  default     = null
  description = "Set to 'false' to disable log forwarding, while continuing to forward other observability data, such as metrics and traces from Lambda functions."
}

variable "dd_step_functions_trace_enabled" {
  type        = string
  default     = null
  description = "Set to 'true' to enable tracing for all Step Functions."
}

variable "dd_use_compression" {
  type        = string
  default     = null
  description = "Set to 'false' to disable log compression. Only valid when sending logs over HTTP."
}

# VPC configuration
variable "dd_use_vpc" {
  type        = bool
  default     = false
  description = "Set to true to deploy the Forwarder to a VPC and send logs, metrics, and traces via a proxy. When set to true, must also set vpc_security_group_ids and vpc_subnet_ids."
}

variable "dd_http_proxy_url" {
  type        = string
  default     = null
  description = "Sets the standard web proxy environment variables HTTP_PROXY and HTTPS_PROXY. These are the url endpoints your proxy server exposes. Make sure to also set dd_skip_ssl_validation to true."
}

variable "dd_no_proxy" {
  type        = string
  default     = null
  description = "Sets the standard web proxy environment variable NO_PROXY. It is a comma-separated list of domain names that should be excluded from the web proxy."
}

variable "vpc_security_group_ids" {
  type        = list(string)
  default     = []
  description = "List of VPC Security Group IDs. Used when dd_use_vpc is enabled."
}

variable "vpc_subnet_ids" {
  type        = list(string)
  default     = []
  description = "List of VPC Subnet IDs. Used when dd_use_vpc is enabled."
}

# Advanced configuration
variable "dd_compression_level" {
  type        = string
  default     = null
  nullable    = true
  description = "Set the compression level from 0 (no compression) to 9 (best compression) when sending logs."

  validation {
    condition = var.dd_compression_level == null ? true : (
      can(tonumber(var.dd_compression_level)) &&
      tonumber(var.dd_compression_level) >= 0 &&
      tonumber(var.dd_compression_level) <= 9
    )
    error_message = "dd_compression_level must be a number between 0 and 9."
  }
}

variable "dd_max_workers" {
  type        = string
  default     = null
  description = "Set the max number of workers sending logs concurrently."
}

variable "iam_role_path" {
  type        = string
  default     = "/"
  description = "The path for the IAM roles."
}

variable "permissions_boundary_arn" {
  type        = string
  default     = null
  description = "ARN for the Permissions Boundary Policy"
}

variable "additional_target_lambda_arns" {
  type        = string
  default     = null
  description = "Comma-separated list of lambda ARNs that get invoked asynchronously with the same input event"
}

variable "dd_api_url" {
  type        = string
  default     = null
  description = "The endpoint URL to forward the metrics to, useful for forwarding metrics through a proxy"
}

variable "dd_trace_intake_url" {
  type        = string
  default     = null
  description = "The endpoint URL to forward the traces to, useful for forwarding traces through a proxy"
}

# S3 bucket configuration
variable "dd_forwarder_bucket_name" {
  type        = string
  default     = null
  description = "The name of the forwarder bucket to create. If not provided, AWS will generate a unique name."
}

variable "dd_forwarder_buckets_access_logs_target" {
  type        = string
  default     = null
  description = "(Optional) The name of the S3 bucket to store access logs. Leave empty if access logging is not needed."
}

variable "dd_store_failed_events" {
  type        = string
  default     = null
  description = "Set to 'true' to enable the forwarder to store events that failed to send to Datadog."
}

variable "dd_forwarder_existing_bucket_name" {
  type        = string
  default     = null
  description = "The name of an existing s3 bucket to use. If not provided, a new bucket will be created."
}

variable "dd_log_level" {
  type        = string
  default     = null
  nullable    = true
  description = "Set the log level for the forwarder. Valid values are DEBUG, INFO, WARN, ERROR, CRITICAL. If not set, default is WARN."

  validation {
    condition     = var.dd_log_level == null ? true : contains(["DEBUG", "INFO", "WARN", "ERROR", "CRITICAL"], var.dd_log_level)
    error_message = "dd_log_level must be one of: DEBUG, INFO, WARN, ERROR, CRITICAL."
  }
}

variable "dd_trace_enabled" {
  type        = bool
  default     = true
  description = "Set to false to disable trace forwarding."
}

variable "dd_enhanced_metrics" {
  type        = bool
  default     = false
  description = "Set to true to enable enhanced Lambda metrics. This will generate additional custom metrics for Lambda functions, including cold starts, estimated AWS costs, and custom tags. Default is false."
}

variable "tags" {
  type        = map(string)
  default     = {}
  description = "A map of tags to assign to all AWS resources created by this module that support tagging."
}
